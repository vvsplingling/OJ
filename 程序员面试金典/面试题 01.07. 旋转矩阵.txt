### [面试题 01.07. 旋转矩阵](https://leetcode-cn.com/problems/rotate-matrix-lcci/)

利用辅助数组

```c++
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int row=matrix.size(),col=matrix[0].size();
        vector<vector<int>> res(row,vector<int>(col,0));
        for(int r=0,cc=0;r<row&&cc<col;++r,++cc)
            for(int c=0,rr=row-1;c<col&&rr>=0;++c,--rr)
                res[r][c]=matrix[rr][cc];
        for(int r=0;r<row;++r)
            for(int c=0;c<col;++c)
                matrix[r][c]=res[r][c];
    }
};
```

上下翻转+主对角线翻转

```c++
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n=matrix.size();
        for(int r=0;r<n/2;++r)
            for(int c=0;c<n;++c)
                swap(matrix[r][c],matrix[n-1-r][c]);
        for(int r=0;r<n;++r)
            for(int c=0;c<r;++c)
                swap(matrix[r][c],matrix[c][r]);
    }
};
```

原地旋转

```c++
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size();
        for (int i = 0; i < n / 2; ++i) {
            for (int j = 0; j < (n + 1) / 2; ++j) {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[n - j - 1][i];
                matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];
                matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];
                matrix[j][n - i - 1] = temp;
            }
        }
    }
};
```

